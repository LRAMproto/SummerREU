function model = model_tetheredpuck(params)
% model = model_ballbouncetest_hybrid(params)
% Hybrid model file for a puck attached to a tether to demonstrate hybrid integrator
% framework. Returns a model structure to be passed to the
% hybrid_integrator function. 
%
% This file uses a spring-damper model for the puck contact
%
% See hybrid_integrator.pdf for specifications on the contents of the structure.
%
% Inputs: params, a structure containing the fields:
%	p.r: puck radius
%	p.m: puck mass
%	p.k: effective stiffness of tether in contact with puck


	% Dynamics for ball flying ballistically
	model.ballistic = struct(...
		'dynamics',{ @(t,x,F) dyn_1dofballistics(t,x,F,params) },...
		'transition_events',{ {@(t,x,F) events_ballbouncetest_impact(t,x,F,params)} },...
		'transition_to',{ {{'pogo'}} },...
		'transition_response',{ {{ [] }} },...
		'state_map',{ struct('pogo',{@state_map_identity}) },...
		'other_events',{ {@events_detect_max_height} },...
		'other_events_response',{ {{ [] }} },...
		'integrator',{ @ode45 },...
		'integrator_options',{ {'Refine',10} }); %return more points on the trajectory
	

	% Dynamics for puck interacting with the tether via a spring/damper
	model.pogo = struct(...
		'dynamics',{ @(t,x,F) dyn_1dofpogo(t,x,F,params) },...
		'transition_events',{ {@(t,x,F) events_ballbouncetest_launch(t,x,F,params)} },...
		'transition_to',{ {{'ballistic'}} },...
		'transition_response',{ {{ [] }} },...
		'state_map',{ struct('ballistic',{@state_map_identity}) },...
		'other_events',{ {} },...
		'other_events_response',{ {} },...
		'integrator',{ @ode45 },...
		'integrator_options',{ {'Refine',10} }); %return more points on the trajectory

end
